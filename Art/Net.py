import networkx as nx
import numpy as np
from scipy.spatial import distance_matrix
import sys
import matplotlib.pyplot as plt
from postman_problems.solver import cpp
from postman_problems.stats import calculate_postman_solution_stats
import itertools
import pandas as pd

cities = [[474, 79], [475, 80], [481, 81], [482, 81], [483, 81], [484, 81], [485, 82], [486, 82], [487, 82], [488, 82], [490, 83], [491, 83], [492, 83], [494, 84], [495, 84], [496, 84], [498, 85], [499, 85], [500, 85], [501, 86], [502, 86], [503, 86], [504, 87], [505, 87], [506, 87], [507, 88], [508, 88], [481, 89], [510, 89], [511, 89], [482, 90], [512, 90], [513, 90], [452, 91], [483, 91], [514, 91], [515, 91], [453, 92], [484, 92], [516, 92], [517, 92], [454, 93], [485, 93], [518, 93], [519, 93], [520, 94], [460, 95], [461, 95], [484, 95], [485, 95], [521, 95], [463, 96], [464, 96], [482, 96], [523, 96], [465, 97], [466, 97], [481, 97], [524, 97], [468, 98], [469, 98], [480, 98], [525, 98], [470, 99], [471, 99], [472, 99], [479, 99], [526, 99], [473,100], [474,100], [475,100], [476,100], [477,100], [459,101], [527,101], [460,102], [528,102], [461,103], [529,103], [462,104], [530,104], [463,105], [531,105], [463,106], [532,106], [464,107], [532,107], [465,108], [533,108], [466,109], [534,109], [535,110], [536,111], [537,112], [468,113], [537,113], [468,114], [538,114], [467,115], [539,115], [467,116], [540,116], [467,117], [541,117], [466,118], [542,118], [466,119], [542,119], [466,120], [543,120], [544,121], [465,122], [545,122], [465,123], [546,123], [465,124], [547,124], [548,125], [464,126], [549,126], [464,127], [550,127], [464,128], [551,128], [464,129], [552,129], [464,130], [553,130], [464,131], [554,131], [555,132], [463,133], [556,133], [463,134], [557,134], [463,135], [558,135], [559,135], [463,136], [560,136], [463,137], [561,137], [463,138], [562,138], [563,138], [463,139], [564,139], [565,139], [463,140], [566,140], [567,140], [463,141], [568,141], [569,141], [463,142], [571,142], [572,142], [574,143], [575,143], [576,143], [577,144], [578,144], [579,144], [464,145], [581,145], [582,145], [583,145], [464,146], [584,146], [585,146], [586,146], [464,147], [588,147], [589,147], [590,147], [464,148], [591,148], [592,148], [593,148], [464,149], [594,149], [595,149], [596,149], [464,150], [597,150], [598,150], [599,150], [464,151], [600,151], [601,151], [465,152], [603,152], [604,152], [465,153], [605,153], [606,153], [465,154], [465,155], [465,156], [466,157], [614,157], [466,158], [615,158], [616,158], [466,159], [617,159], [618,159], [466,160], [619,160], [467,161], [620,161], [467,162], [621,162], [622,162], [468,163], [623,163], [624,164], [471,165], [625,165], [472,166], [473,166], [626,166], [474,167], [627,167], [476,168], [477,168], [628,168], [629,169], [477,170], [477,171], [630,171], [478,172], [631,172], [478,173], [631,173], [478,174], [632,174], [479,175], [632,175], [479,176], [633,176], [479,177], [633,177], [480,178], [634,178], [480,179], [634,179], [480,180], [634,180], [481,181], [481,182], [635,182], [481,183], [635,183], [636,185], [636,186], [483,187], [636,187], [483,188], [637,188], [482,189], [493,189], [637,189], [494,190], [637,190], [496,191], [497,192], [498,192], [499,192], [500,192], [501,192], [502,192], [503,192], [638,192], [504,193], [638,193], [505,194], [638,194], [505,195], [639,195], [506,196], [639,196], [639,197], [507,198], [640,198], [507,199], [640,199], [640,200], [641,202], [641,203], [641,204], [642,205], [642,206], [642,207], [499,209], [521,209], [643,209], [498,210], [522,210], [643,210], [523,211], [643,211], [497,212], [524,212], [644,212], [496,213], [525,213], [644,213], [644,214], [526,216], [645,216], [494,217], [526,217], [645,217], [494,218], [645,218], [493,219], [532,219], [533,219], [646,219], [493,220], [527,220], [534,220], [646,220], [527,221], [535,221], [646,221], [492,222], [536,222], [646,222], [492,223], [528,223], [537,223], [647,223], [492,224], [528,224], [538,224], [647,224], [491,225], [528,225], [539,225], [647,225], [491,226], [499,226], [528,226], [540,226], [491,227], [499,227], [528,227], [541,227], [648,227], [491,228], [509,228], [542,228], [648,228], [491,229], [500,229], [501,229], [507,229], [508,229], [527,229], [543,229], [648,229], [527,230], [544,230], [491,231], [526,231], [544,231], [649,231], [491,232], [649,232], [491,233], [546,233], [649,233], [509,234], [523,234], [547,234], [650,234], [509,235], [521,235], [522,235], [548,235], [650,235], [509,236], [518,236], [519,236], [520,236], [650,236], [511,237], [512,237], [513,237], [514,237], [515,237], [516,237], [549,237], [650,237], [550,238], [651,238], [551,239], [651,239], [551,240], [651,240], [552,241], [651,241], [553,242], [652,242], [553,243], [652,243], [554,244], [652,244], [653,246], [653,247], [653,248], [541,250], [542,250], [557,250], [654,250], [537,251], [538,251], [539,251], [540,251], [544,251], [545,251], [546,251], [547,251], [557,251], [654,251], [534,252], [535,252], [549,252], [550,252], [654,252], [533,253], [551,253], [552,253], [531,254], [655,254], [530,255], [655,255], [558,256], [655,256], [508,257], [509,257], [510,257], [511,257], [512,257], [513,257], [559,257], [506,258], [515,258], [656,258], [484,259], [505,259], [516,259], [517,259], [656,259], [484,260], [504,260], [518,260], [656,260], [502,261], [519,261], [520,261], [502,262], [523,262], [657,262], [501,263], [523,263], [657,263], [500,264], [657,264], [482,265], [487,265], [499,265], [657,265], [482,266], [487,266], [658,266], [487,267], [498,267], [658,267], [481,268], [487,268], [497,268], [658,268], [481,269], [496,269], [658,269], [481,270], [488,270], [659,270], [481,271], [488,271], [495,271], [659,271], [481,272], [488,272], [494,272], [659,272], [481,273], [488,273], [494,273], [659,273], [480,274], [488,274], [493,274], [480,275], [488,275], [660,275], [480,276], [488,276], [660,276], [480,277], [488,277], [660,277], [480,278], [660,278], [480,279], [661,279], [480,280], [488,280], [489,280], [661,280], [488,281], [661,281], [479,282], [661,282], [479,283], [479,284], [662,284], [479,285], [662,285], [479,286], [662,286], [479,287], [662,287], [479,288], [478,289], [663,289], [478,290], [663,290], [478,291], [663,291], [478,292], [663,292], [478,293], [664,293], [478,294], [664,294], [478,295], [664,295], [478,296], [664,296], [664,297], [477,298], [665,298], [477,299], [665,299], [477,300], [665,300], [477,301], [665,301], [477,302], [665,302], [477,303], [477,304], [666,304], [477,305], [666,305], [477,306], [666,306], [666,307], [476,308], [666,308], [476,309], [667,309], [476,310], [667,310], [476,311], [667,311], [476,312], [667,312], [476,313], [667,313], [476,314], [667,314], [476,315], [668,315], [476,316], [668,316], [476,317], [668,317], [668,318], [475,319], [668,319], [475,320], [668,320], [475,321], [475,322], [669,322], [475,323], [669,323], [475,324], [669,324], [475,325], [669,325], [475,326], [669,326], [475,327], [669,327], [475,328], [669,328], [475,329], [475,330], [670,330], [670,331], [670,332], [474,333], [670,333], [474,334], [670,334], [474,335], [670,335], [474,336], [670,336], [474,337], [670,337], [474,338], [670,338], [474,339], [474,340], [671,340], [474,341], [671,341], [474,342], [671,342], [474,343], [671,343], [474,344], [671,344], [474,345], [671,345], [474,346], [671,346], [474,347], [671,347], [473,348], [671,348], [473,349], [671,349], [473,350], [473,351], [672,351], [473,352], [672,352], [473,353], [672,353], [473,354], [672,354], [473,355], [672,355], [473,356], [672,356], [473,357], [672,357], [473,358], [672,358], [473,359], [672,359], [473,360], [672,360], [473,361], [473,362], [473,363], [473,364], [673,364], [473,365], [673,365], [473,366], [673,366], [673,367], [472,368], [673,368], [472,369], [673,369], [472,370], [673,370], [472,371], [673,371], [472,372], [673,372], [472,373], [673,373], [472,374], [673,374], [472,375], [673,375], [472,376], [674,376], [472,377], [674,377], [472,378], [674,378], [472,379], [674,379], [472,380], [674,380], [472,381], [674,381], [472,382], [674,382], [472,383], [674,383], [472,384], [674,384], [472,385], [674,385], [472,386], [674,386], [472,387], [674,387], [472,388], [674,388], [472,389], [674,389], [472,390], [472,391], [675,391], [472,392], [675,392], [675,393], [471,394], [675,394], [471,395], [675,395], [471,396], [675,396], [471,397], [675,397], [471,398], [675,398], [471,399], [675,399], [471,400], [675,400], [471,401], [675,401], [471,402], [675,402], [471,403], [675,403], [471,404], [675,404], [471,405], [471,406], [676,406], [471,407], [676,407], [471,408], [676,408], [471,409], [676,409], [471,410], [676,410], [471,411], [676,411], [471,412], [676,412], [471,413], [676,413], [471,414], [676,414], [471,415], [676,415], [471,416], [676,416], [471,417], [676,417], [471,418], [676,418], [471,419], [676,419], [471,420], [471,421], [677,421], [471,422], [677,422], [471,423], [677,423], [471,424], [677,424], [471,425], [677,425], [471,426], [677,426], [471,427], [677,427], [471,428], [677,428], [471,429], [677,429], [471,430], [677,430], [471,431], [677,431], [471,432], [677,432], [471,433], [677,433], [471,434], [677,434], [471,435], [677,435], [471,436], [678,436], [678,437], [470,438], [678,438], [470,439], [678,439], [470,440], [678,440], [470,441], [678,441], [470,442], [678,442], [470,443], [678,443], [470,444], [678,444], [470,445], [678,445], [470,446], [678,446], [470,447], [678,447], [470,448], [678,448], [470,449], [678,449], [470,450], [678,450], [470,451], [470,452], [679,452], [470,453], [679,453], [470,454], [679,454], [470,455], [679,455], [470,456], [679,456], [470,457], [679,457], [470,458], [679,458], [470,459], [679,459], [470,460], [679,460], [470,461], [679,461], [470,462], [679,462], [470,463], [679,463], [470,464], [679,464], [470,465], [679,465], [470,466], [679,466], [470,467], [680,467], [470,468], [680,468], [470,469], [680,469], [470,470], [680,470], [470,471], [680,471], [470,472], [680,472], [470,473], [680,473], [470,474], [680,474], [470,475], [680,475], [470,476], [680,476], [470,477], [680,477], [470,478], [680,478], [470,479], [680,479], [470,480], [680,480], [470,481], [680,481], [470,482], [680,482], [470,483], [470,484], [681,484], [681,485], [469,486], [681,486], [469,487]]
print(cities)
d = distance_matrix(cities, cities)
G = nx.from_numpy_matrix(d)
print(G.number_of_edges())
T=nx.minimum_spanning_tree(G)
# T.add_edge(957, 958, weight=d[957, 958])

# nx.write_edgelist(T,"test.adjlist", data=True)
# T = nx.read_edgelist('test.adjlist')
print(sorted(T.edges(data=True)))
TE = T.edges()
for e in TE:
    print(e)
    # print(cities[int(e[0])])
nodes_odd_degree = [v for v, d2 in T.degree() if d2 % 2 == 1]
print(len(nodes_odd_degree))
odd_node_pairs = list(itertools.combinations(nodes_odd_degree, 2))

def get_shortest_paths_distances(graph, pairs, edge_weight_name):
    """Compute shortest distance between each pair of nodes in a graph.  Return a dictionary keyed on node pairs (tuples)."""
    distances = {}
    for pair in pairs:
        distances[pair] = nx.dijkstra_path_length(graph, pair[0], pair[1], weight=edge_weight_name)
    return distances

odd_node_pairs_shortest_paths = get_shortest_paths_distances(T, odd_node_pairs, 'weight')

def create_complete_graph(pair_weights, flip_weights=True):
    """
    Create a completely connected graph using a list of vertex pairs and the shortest path distances between them
    Parameters:
        pair_weights: list[tuple] from the output of get_shortest_paths_distances
        flip_weights: Boolean. Should we negate the edge attribute in pair_weights?
    """
    g = nx.Graph()
    for k, v in pair_weights.items():
        wt_i = - v if flip_weights else v
        g.add_edge(k[0], k[1], attr_dict={'weight': wt_i})
    return g

g_odd_complete = create_complete_graph(odd_node_pairs_shortest_paths, flip_weights=True)
odd_matching_dupes = nx.algorithms.max_weight_matching(g_odd_complete, True)
print('Number of edges in matching: {}'.format(len(odd_matching_dupes)))
odd_matching = list(pd.unique([tuple(sorted([k, v])) for k, v in odd_matching_dupes.items()]))
print(odd_matching)

def add_augmenting_path_to_graph(graph, min_weight_pairs):
    """
    Add the min weight matching edges to the original graph
    Parameters:
        graph: NetworkX graph (original graph from trailmap)
        min_weight_pairs: list[tuples] of node pairs from min weight matching
    Returns:
        augmented NetworkX graph
    """

    # We need to make the augmented graph a MultiGraph so we can add parallel edges
    graph_aug = nx.MultiGraph(graph.copy())
    for pair in min_weight_pairs:
        graph_aug.add_edge(pair[0],                           pair[1],                           weight=nx.dijkstra_path_length(graph, pair[0], pair[1]),
                           trail='augmented'
                          )
    return graph_aug

g_aug = add_augmenting_path_to_graph(T, odd_matching)

# Counts
print('Number of edges in original graph: {}'.format(len(T.edges())))
print('Number of edges in augmented graph: {}'.format(len(g_aug.edges())))
print(len(g_aug.edges(data=True)))
def create_eulerian_circuit(graph_augmented, graph_original, starting_node=None):
    """Create the eulerian path using only edges from the original graph."""
    euler_circuit = []
    naive_circuit = list(nx.eulerian_circuit(graph_augmented, source=starting_node))

    for edge in naive_circuit:
        edge_data = graph_augmented.get_edge_data(edge[0], edge[1])    
        # print(edge_data)
        try: 
            edge_data[0]['trail']
            # If `edge` exists in original graph, grab the edge attributes and add to eulerian circuit.
            edge_att = graph_original[edge[0]][edge[1]]
            euler_circuit.append((edge[0], edge[1], edge_att))
        except KeyError:
            aug_path = nx.shortest_path(graph_original, edge[0], edge[1], weight='distance')
            aug_path_pairs = list(zip(aug_path[:-1], aug_path[1:]))

            # print('Filling in edges for augmented edge: {}'.format(edge))
            # print('Augmenting path: {}'.format(' => '.join(aug_path)))
            # print('Augmenting path pairs: {}\n'.format(aug_path_pairs))

            # If `edge` does not exist in original graph, find the shortest path between its nodes and
            #  add the edge attributes for each link in the shortest path.
            for edge_aug in aug_path_pairs:
                edge_aug_att = graph_original[edge_aug[0]][edge_aug[1]]
                euler_circuit.append((edge_aug[0], edge_aug[1], edge_aug_att))

    return euler_circuit

# euler_circuit = create_eulerian_circuit(g_aug, T)
# print(len(euler_circuit))
# for edge in euler_circuit:
#     print(cities[int(edge[0])])



"""

Import image
Convert to grayscale
Blur n times
NMS
Thin line n times
    -> Points
Convert to x,y points
distance matrix
Generate adjacency matrix
    Simple: threshold distance -> edge
        Problem - may not be fully connected
    variable thresholding - change threshold based on min dist for a vertex
    dynamic thresholding - repeated

    Create components by connecting vertices with d < 2

    Ensure even degree except for start and end?
        Can choose start and end, add edge between, remove and split at the end
Route inspection problem

"""